 __ Using Classic Redux :

1- Create initialStateObj

Exp : const initialStateObj = {
	a : 1,
	b: 2
}

2- Define reducer function

Exp : function reducer() {

}

3- Passing the initialStateObj as a default value for state 

Exp : function reducer(state = initialStateObj, action) {

}


4- Using different action names in new way like the what is the action does

Exp : function reducer(state = initialStateObj, action) {
	switch (action.type) {
		case : "account/deposit" (state domain / event name)
	}
}

5- Creating Redux store : npm install redux
6- Using createStore method from redux : import {createStore} from "redux"
7- Create a variable to store the createStore

Exp : const store = creatStore(reducer)

8- You can use dispatch as when you use useReducer before

Exp : store.dispatch({type: "", payload : ""})

9- To use this Redux as a complete file just go to app file and import "./store" that will run the code inside the redux file 

10- To see the whole store just use store.getState()

11- You can use an object inside the payload 

Exp : store.dispatch({type: "blabla", payload : {amount : 500, purpose : "buy car" }}) then going to action and 
Exp : case "blabla" :
	return {...state, load: action.payload.amount, loanPurpose : action.payload.purpose}

12- Action Creators : it's a convention in React community and it is  functions return actions
 
Exp :

function actionName (arg) { // let's call it deposit
	return {type : "", payload : arg}
}

To use is 

store.dispatch(deposit(arg))

13- You have to use combineReducers to combine between multi reducers

Exp: const rootReducer = combineReducers({
	anyName : reducer01,
	anyName : reducer02
})

then change the store with the (combineRedcuers) rootReducer to have all reducers in one 

const store = createStore(rootReducer)

14- All the previous steps we were using isolated Redux but from now we will use it with React so install the following package

npm i react-redux	

15- import provider from react-redux and wrap the code who will consume the redux

import { Provider } from "react-redux

<Provider store={store}>

Code ....

</Provider>

16- To can use the Rudux all around the app with the components you have to 

- import { useSelector } from "react-redux"
 
- const varName =  useSelector(store => store.anyName) // anyName refer to step number 13

17- To dispatch actions to redux reducer so you need to

- import {useDispatch} from "react-redux"
- import { actionCreator } from './theFileName'
- const dispatch = useDispatch();
- inside and event handler user :

dispatch(actionCreator(arg1, arg2, arg3))

Optional 18- Legacy way to consume the data from Classic redux 

- create a function mapStateProps(state) {
	return {
		data: state.account.data
	}
}


export default connect(mapStateProps)(componentName)

18- Middleware Thunks

- npm i redux-thunk
- import thunk from "redux-thunk"
- import { applyMiddleware } from "redux"
- const store = createStore(rootReducer, applyMiddleware(thunk))
- will dispatch a function another meaning if we return a function redux knows that will be asyn action will excute it before dispatching anything to the store 

export function deposit(arg1, arg2) {

	// Any Code here also .....

	return function(dispatch, getState) {
	// API CALL
	
	const res = await fetch()
	const data = await res.json()

	
	// Dispatch ACTION
	dispatch({type : "featureName/actionName", payload : data}) (account/deposit)
}
}



// New way to use Redux toolkit



1- Redux Toolkit the store file // Main file

- npm i @reducjs/toolkit
- import { configureStore } from "@reducjs/toolkit"
	- configureStore will do multiple things
	- will combine the reducers
	- will add the thunk middleware
	- will setup the devTools

to use it 

- const store = configureStore({
	reducer: {
		anyName : reducer01,
		anyName : reducer02
	}
})

export defualt store

2- Slice Features 

- import { createSlice } from @reducjs/toolkit : 
	- automaticly create action creators from our reducer
	- it makes writing reducers more easy
	- now you can mutate the state inside reducer
 
- const anyName = createSlice({
	name: // feature name similar account
	initialState, 
	reducers : { // Here is instead of Switch statement
		deposit(state, action) {
			state.property = state.property - action.payload
		},

		withdraw(state, action) {
			state.property = state.property - action.payload
		}
		// You can add more reducers ....
	} 
	
})

3- To make the payload recieves more than one value you have to use prepare function from redux

- const anyName = createSlice({
	name: anyName,
	initialState, 
	reducers : { // Here is instead of Switch statement
		deposit(state, action) {
			state.property = state.property - action.payload
		},

		withdraw(state, action) {
			state.property = state.property - action.payload
		}
		
		// Using Prepare
		withdraw : {
			prepare(arg1, arg2) {
				return {
					payload : {arg1, arg2} // Here Prepare modify the payLoad to has more that one value
				}		
	
			}
			
			reducer(state, action) {
			state.property = state.property - action.payload
		}}
	
	} 
	
})

export const {deposit, withdraw, ...} = anyName.actions
export default anyName.reducers

4- Thunks with Redux Toolkit
__ Redux DevTool :

1- Go to google chrome and install the extension called redux devtool
2- Go to your project and install npm i redux-devtools-extension

