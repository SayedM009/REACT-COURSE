 As usual to use some hooks there are 3 steps : 

(Provider, value, consume)

__1- First import createContext() and put it in a variable with a capital letter because it is a component;
exp: 

import {createContext} from "react"
const NameContext = createContext()

__2- Use the NameContext with the provider and wrapping the elements you want them to use the context with it and put the passing values inside the value to pass. (Provider, value)
exp:

function App() {
	return <>
		<NameContext.Provider value={{}}>
			<Component />
			<Component />
			<Component />
		</NameContext.Provider>
	</>
}

__3- Consuming the context with importing useContext inside every component that needs the value and it will recieve the whole value AND put the NameContext inside useContext.
exp: 

function Component() {
	const {value, value, value} = useContext(NameContext)
	return ....

}

Normal Pattern to Use Context API with Sperated File

- Keep in mind put every context in sperated file
- Please follow the following pattern :

import { createContext, useState, useEffect, useContext } from "react";

const CitiesContext = createContext();

function CitiesProvider({children}) {

    const [cities, setCities] = useState([])
    const [isLoading, setIsLoading] = useState("")

    useEffect(function() {
        async function fetching() {
        try {
            setIsLoading("is Loading....")
            const cities = await fetch("http://localhost:9000/Countries")
            const  data= await cities.json();
            console.log(data)
            setCities(data);
            setIsLoading("")
        } catch  (error) {
            console.log(error)
            setIsLoading("Something Went Wrong Try Again! â›”")
        }
        }
        fetching()
    }, [])

    return <CitiesContext.Provider value={{cities, isLoading}}>
        {children}
    </CitiesContext.Provider>
}

// Custom Hook to Consume The Context Every Where
function useCities() {
    const context = useContext(CitiesContext)
    if (context === 'undefind') throw new Error("Can not  be used outside of the Cities Provider")
    return context;
}

export {CitiesProvider, useCities}