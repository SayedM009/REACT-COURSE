__How To Use React Router Dom:

1- npm i react-router-dom
2- use <BrowserRouter></BrowserRouter>
3- use <Routes></Routes> Inside The Previous one
4- use <Route path="" element={component} /> Inside The Previous one


Expamle :

<BrowserRouter>
	<Routes>
		<Route index element={component}/> // this will be the default page (first page)
		<Route path="Homepage" element={component}/>
		<Route path="about" element={component}/>
		<Route path="*" element={component}/> // use case page not found
	</Routes>
</BrowserRouter>

__How to go to routes:

1- <Link to="/">Homepage</Link>
A- <Link to="/about">Homepage</Link>

2- <NavLink to="/">Homepage</NavLink> // but here navlink provids an active class you can pick it to custom the anchor
A- <NavLink to="/about">Homepage</NavLink> (Declarative)


__How to use nested routes

1- <BrowserRouter>
	<Routes>
		<Route index element={component}/> // this will be the default page (first page)
		<Route path="Homepage" element={component}/>
		<Route path="about" element={component}> // nested routes
			<Route path="one" element={component}/>
			<Route path="two" element={component}/>
		</Route>
		<Route path="*" element={component}/> // use case page not found
	</Routes>
</BrowserRouter>

2- Have to use <OutLet /> Component inside the place you want to should the target component
3- Have to use <Link to=""/> or <NavLink to="" /> to redirect to that target component


__How to use Params with react router:

1- Create a new route

<Route path="path/:paramName" element={component}/>

2- Link to that route

<Link to="paramValue" /> without slash /.

3- Read the state from URL

Use const {x} = useParams() to get the param and use it.


__How to use quary string with react router:

1- You have to follow this pattern 

<Link to={`${paramValue}?quaryName=${quaryValue}&quaryName=${quaryValue}`} /> without slash /.

2- To use quary string have to use

const [searchParams, setSearchParams] = useSearchParams()

3- Need to get the quary wtih it's name

const x = searchParams.get('quaryName')

4- You can update the search params

setSearchParams({ paramName1: value, paramName2: value })


__ Programmatic Navigation : move to new URL the user does not have to click on a link main use case to this behavior it after submitting a form. () (Imperative)

1- You have to use useNavigate() 

const navigate useNavigate();

2- Use navigate with submitting form or others like events

onClick={() => navigate("routeName") }

3- You can use it to go back or forward also

onClick={() => navigate(-1) }
onClick={() => navigate(+1) }


__ Programmatic Navigation : main use case when entering to nested routes it will redirect to the target () (Declarative)

<Route index element={<Navigate replace to="routeName"} />


