__There is a new way to use Routing 

1- npm install react-router-dom
2- import { createBrowserRouter, RouterProvider } from "react-router-dom";
3- Direct Routing const router = createBrowserRouter([
  {
        path: "/",
        element: <Home />,
      },
      {
        path: "/menu",
        element: <Menu />,
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
]);

4- Nested Routing 
const router = createBrowserRouter([
  {
    element: <Applayout />,
    children: [
      {
        path: "/",
        element: <Home />,
      },
      {
        path: "/menu",
        element: <Menu />,
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
    ],
  },
]);

with using <Outlet /> to show the target routing

5- function App() {
  return <RouterProvider router={router} />;
}

6- Fetching Data with React Router 

- create the loader
- provider the loader 
- provider the data for the page
- the convention seems to be the place the loader for the data of a certain page inside the file of that page

1`- create the loader function and get the data from fetch api
2`- provider the loader to the routing with loader property 
const router = createBrowserRouter([
  {
    element: <Applayout />,
    children: [
      {
        path: "/",
        element: <Home />, 
      },
      {
        path: "/menu",
        element: <Menu />,
	loader:loader
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
    ],
  },
]);

3`- import {useLoaderData} from "react-router-dom" then inside the component that will use the data came from the loader 

const anyName = useLoaderData()

5- How to display a loader over the whole page content there is a property inside the useNavigation called state that state change depends on the state of the conent 

if you make render logic when state === 'loading' you can render any loader component as you want 

<<<<<<< HEAD

6- Getting params with react router inside the loader function put a prameter called params then used it as the following:

funciton loader({params}) {
	// then you can use the params like params.paramName like params.orderId
}
=======
7- Error Handling with new Routing 

const router = createBrowserRouter([
  {
    element: <Applayout />,
    errorElement : <Error /> // will display an error message if anything happened for anypages (global)
    children: [
      {
        path: "/",
        element: <Home />, 
      },
      {
        path: "/menu",
        element: <Menu />,
	loader:loader,
	errorElement : <Error /> // will display an error message if anything happened for fetching data to the specific page here it's menu page (local)
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
    ],
  },
]);

then inside the the error component there is an customHook called useRouterError()

const error = useRouterError()

error.data || error.message // to display the Error message
<<<<<<< HEAD

8- actions can use it to write data or muitate data with react router to server
	- First you have to use a Form component that react router provides it you can use post , patch or delete these only methods you can use here not get, it will not work. you can use action to where will write the 	path but it is not necessary react router will automatically match the action with the closest path
	
	Exp : 
		<Form method="POST" action="path"></Form>

	- Create an action it's a function 
	Exp :
		export async function action({request}) {
			const formData = await request.formData() // formData it's a webAPi providered by the browser
		
		}

	- connect the action with the route
	Exp: 
		import {action as createAction} from "filename"
		const router = createBrowserRouter([
  {
    element: <Applayout />,
    errorElement : <Error /> // will display an error message if anything happened for anypages (global)
    children: [
      {
        path: "/",
        element: <Home />, 
      },
      {
        path: "/menu",
        element: <Menu />,
	loader:loader,
	errorElement : <Error /> // will display an error message if anything happened for fetching data to the specific page here it's menu page (local)
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
	action : createAction
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
    ],
  },
]);
	- To see the formData use 
	Exp :
		export async function action({request}) {
			const formData = await request.formData() // formData it's a webAPi providered by the browser
			const data = Object.fromEntries(formData)
		
		
			return null
		}

	- To can getting some data and pass it into the action with hidden input
	Exp: 
		<input type="hidden" name="cart" value={data} />

	- Now you can use the function who can make a request to the api here you can not use hooks because it's a regular function not a component so you have to use another function called redirect()
	Exp :
		export async function action({request}) {
			const formData = await request.formData() // formData it's a webAPi providered by the browser
			const data = Object.fromEntries(formData)
			const newOrder = await createOrder(data)

		
			return redirect(`/order/${newOrder.id}`)
		}
	
=======

9- use can useNavigation() to handle something during the submitting 
	const isSubmitting = useNavigation.status === "submitting"


