__There is a new way to use Routing 

1- npm install react-router-dom
2- import { createBrowserRouter, RouterProvider } from "react-router-dom";
3- Direct Routing const router = createBrowserRouter([
  {
        path: "/",
        element: <Home />,
      },
      {
        path: "/menu",
        element: <Menu />,
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
]);

4- Nested Routing 
const router = createBrowserRouter([
  {
    element: <Applayout />,
    children: [
      {
        path: "/",
        element: <Home />,
      },
      {
        path: "/menu",
        element: <Menu />,
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
    ],
  },
]);

with using <Outlet /> to show the target routing

5- function App() {
  return <RouterProvider router={router} />;
}

6- Fetching Data with React Router 

- create the loader
- provider the loader 
- provider the data for the page
- the convention seems to be the place the loader for the data of a certain page inside the file of that page

1`- create the loader function and get the data from fetch api
2`- provider the loader to the routing with loader property 
const router = createBrowserRouter([
  {
    element: <Applayout />,
    children: [
      {
        path: "/",
        element: <Home />, 
      },
      {
        path: "/menu",
        element: <Menu />,
	loader:loader
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
    ],
  },
]);

3`- import {useLoaderData} from "react-router-dom" then inside the component that will use the data came from the loader 

const anyName = useLoaderData()

5- How to display a loader over the whole page content there is a property inside the useNavigation called state that state change depends on the status of the conent 

if you make render logic when state === 'loading' you can render any loader component as you want 

<<<<<<< HEAD

7- Getting params with react router inside the loader function put a prameter called params then used it as the following:

funciton loader({params}) {
	// then you can use the params like params.paramName like params.orderId
}
=======
6- Error Handling with new Routing 

const router = createBrowserRouter([
  {
    element: <Applayout />,
    errorElement : <Error /> // will display an error message if anything happened for anypages (global)
    children: [
      {
        path: "/",
        element: <Home />, 
      },
      {
        path: "/menu",
        element: <Menu />,
	loader:loader,
	errorElement : <Error /> // will display an error message if anything happened for fetching data to the specific page here it's menu page (local)
      },
      {
        path: "/cart",
        element: <Cart />,
      },
      {
        path: "/order/new",
        element: <CreateOrder />,
      },
      {
        path: "/order/:orderId",
        element: <Order />,
      },
    ],
  },
]);

then inside the the error component there is an customHook called useRouterError()

const error = useRouterError()

error.data || error.message // to display the Error message
>>>>>>> 1a5985ab0f4a337264120f3ede9450722520bd36
